import { observer } from "mobx-react-lite";
import { useState, useRef, useEffect } from "react";
import { useStores } from "../store/rootStoreContext";
import { getImage } from "../http/userApi"
import "./Styles.css";
// –°–æ–∑–¥–∞–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
const MessageItem = observer(({ msg }) => {
    const [imageBlobUrl, setImageBlobUrl] = useState(null);
    const [imageError, setImageError] = useState(false);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    const wasImage = msg.isImage ||
        /^(\/images\/|https?:\/\/).+(\.(jpg|jpeg|png|gif|bmp|webp|svg))($|\?)/i.test(msg.content);

    const isRelativeImagePath = /^\/images\/[^\\]+\.(jpg|jpeg|png|gif|bmp|webp|svg)$/i.test(msg.content);

    // useEffect —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ - –≤–Ω—É—Ç—Ä–∏ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    useEffect(() => {
        if (isRelativeImagePath && !imageBlobUrl && !imageError) {
            getImage(msg.content)
                .then(blob => {
                    const blobUrl = URL.createObjectURL(blob);
                    setImageBlobUrl(blobUrl);
                })
                .catch(error => {
                    console.error('Failed to load image:', error);
                    setImageError(true);
                });
        }
    }, [isRelativeImagePath, msg.content]);

    return (
        <div className={`message ${msg.user === "Misa" ? "misa-message" : "user-message"}`}>
            <div className="message-avatar">
                {msg.user === "Misa" ? "M" : "üë§"}
            </div>
            <div className="message-content">
                <div className="message-sender">{msg.user}</div>
                {wasImage && imageBlobUrl ? (
                    <img
                        src={imageBlobUrl}
                        alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç Misa"
                        className="message-image"
                        onError={(e) => {
                            console.error('Image load error');
                            setImageError(true);
                        }}
                    />
                ) : (
                    <div className="message-text" style={{ whiteSpace: 'pre-line' }}>
                        {msg.content}
                    </div>
                )}
                {wasImage && imageError && (
                    <div className="message-text error">
                        –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {msg.content}
                    </div>
                )}
                <div className="message-time">
                    {new Date(msg.timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}
                </div>
            </div>
        </div>
    );
});

const Chat = observer(({ onMenuToggle }) => {
    const { chatStore } = useStores();
    const [message, setMessage] = useState("");
    const messagesEndRef = useRef(null);
    const textareaRef = useRef(null);
    const messagesContainerRef = useRef(null);

    const scrollToBottom = () => {
        if (messagesContainerRef.current) {
            messagesContainerRef.current.scrollTop = messagesContainerRef.current.scrollHeight;
        }
    };

    useEffect(() => {
        scrollToBottom();
    }, [chatStore.messages]);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã—Å–æ—Ç—ã textarea
    const adjustTextareaHeight = () => {
        if (textareaRef.current) {
            textareaRef.current.style.height = 'auto';
            textareaRef.current.style.height = Math.min(textareaRef.current.scrollHeight, 150) + 'px';
        }
    };

    useEffect(() => {
        adjustTextareaHeight();
    }, [message]);

    const handleSendMessage = async () => {
        if (message.trim()) {
            await chatStore.sendMessage(message);
            setMessage("");
            textareaRef.current?.focus();
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã—Å–æ—Ç—É textarea –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            if (textareaRef.current) {
                textareaRef.current.style.height = 'auto';
            }
        }
    };

    const handleKeyPress = (e) => {
        if (e.key === "Enter" && !e.shiftKey) {
            e.preventDefault();
            handleSendMessage();
        }
        // Shift+Enter - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç —Å—Ç—Ä–æ–∫—É
    };

    const handleInputChange = (e) => {
        setMessage(e.target.value);
    };

    const handleClearHistory = () => {
        if (window.confirm("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π?")) {
            chatStore.clearMessages();
        }
    };


    const getConnectionStatus = () => {
        if (chatStore.isConnected) {
            return <span className="connection-status status-connected">‚óè –ü–æ–¥–∫–ª—é—á–µ–Ω–æ</span>;
        } else if (chatStore.isConnecting) {
            return <span className="connection-status status-connecting">‚óè –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...</span>;
        } else {
            return <span className="connection-status status-disconnected">‚óè –û—Ç–∫–ª—é—á–µ–Ω–æ</span>;
        }
    };

    return (
        <div className="chat-container">
            <div className="chat-header">
                <h1>Misa AI –ß–∞—Ç</h1>
                {/* –î–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é */}
                <div className="chat-header-controls">
                    <div className="chat-status">
                        {getConnectionStatus()}
                    </div>
                    {chatStore.messages.length > 0 && (
                        <button
                            onClick={handleClearHistory}
                            className="clear-history-button"
                            title="–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"
                        >
                            üóëÔ∏è
                        </button>
                    )}
                </div>
            </div>

            {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π */}
            <div className="messages-container" ref={messagesContainerRef}>
                <div className="messages-content">
                    {chatStore.messages.length === 0 ? (
                        <div className="empty-chat">
                            <div className="empty-icon">üí¨</div>
                            <p>–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ —Å Misa AI</p>
                            <small>–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –º—ã—Å–ª—è–º–∏</small>
                        </div>
                    ) : (
                        chatStore.messages.map(msg => (
                            <MessageItem key={msg.id} msg={msg} />
                        ))
                    )}
                    <div ref={messagesEndRef} />
                </div>
            </div>

            {chatStore.isLoading && (
                <div className="typing-indicator">
                    <div className="typing-dots">
                        <span></span>
                        <span></span>
                        <span></span>
                    </div>
                    Misa AI –ø–µ—á–∞—Ç–∞–µ—Ç...
                </div>
            )}

            <div className="input-container">
                <textarea
                    ref={textareaRef}
                    value={message}
                    onChange={handleInputChange}
                    onKeyPress={handleKeyPress}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ... (Shift+Enter –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏)"
                    rows={1}
                    style={{
                        minHeight: '40px',
                        maxHeight: '150px',
                        resize: 'none',
                        padding: '12px',
                        border: '1px solid #ddd',
                        borderRadius: '20px',
                        fontSize: '14px',
                        outline: 'none',
                        transition: 'border-color 0.3s ease',
                        fontFamily: 'inherit',
                        lineHeight: '1.4'
                    }}
                    disabled={chatStore.isLoading || !chatStore.isConnected}
                    className="message-textarea"
                />
                <button
                    onClick={handleSendMessage}
                    disabled={!message.trim() || chatStore.isLoading || !chatStore.isConnected}
                    className="send-button"
                    title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
                >
                    ‚û§
                </button>
            </div>

            {chatStore.error && (
                <div className="error-message">
                    <span>‚ö†Ô∏è {chatStore.error}</span>
                    <button
                        onClick={() => chatStore.clearError()}
                        className="error-close"
                        title="–ó–∞–∫—Ä—ã—Ç—å"
                    >
                        √ó
                    </button>
                </div>
            )}

            {!chatStore.isConnected && !chatStore.isConnecting && (
                <div className="reconnect-container">
                    <p>–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ</p>
                    <button
                        onClick={() => chatStore.connect()}
                        className="reconnect-button"
                    >
                        üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                    </button>
                </div>
            )}
        </div>
    );
});

export default Chat;