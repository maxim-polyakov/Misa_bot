import { Context } from "../index.js";
import { useContext, useState, useEffect } from "react";
import { Route, Routes, Navigate } from "react-router-dom";
import { authRoutes, publicRoutes } from "../Routes.js";
import { observer } from "mobx-react-lite";
import Chat from "../pages/Chat.js";
import { LOGIN_ROUTE } from "../utils/consts.js";

const AppRouter = observer(() => {
    const { user } = useContext(Context);

    // üîê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ localStorage
    const [isAuth, setIsAuth] = useState(() => {
        const savedAuth = localStorage.getItem('userIsAuth');
        return savedAuth ? JSON.parse(savedAuth) : false;
    });

    // üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º MobX –∏ localStorage
    useEffect(() => {
        if (user?.isAuth !== undefined) {
            setIsAuth(user.isAuth);
            localStorage.setItem('userIsAuth', JSON.stringify(user.isAuth));
        }
    }, [user?.isAuth]);

    // üöÄ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    useEffect(() => {
        const savedAuth = localStorage.getItem('userIsAuth');
        // –í–∞–∂–Ω–æ: –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∫ –±—É–ª–µ–≤—É –∑–Ω–∞—á–µ–Ω–∏—é
        if (savedAuth === 'true') {
            console.log("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ localStorage");
            // –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –≤–∞—à–µ–≥–æ MobX-—Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            user.setIsAuth(true);
        }
    }, [user]); // –î–æ–±–∞–≤—å—Ç–µ `user` –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ `setIsAuth` —è–≤–ª—è–µ—Ç—Å—è –µ–≥–æ –º–µ—Ç–æ–¥–æ–º

    console.log("User auth status:", isAuth);

    return (
        <Routes>
            {/* –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö */}
            {isAuth &&
                authRoutes.map(({ path, Component }) => (
                    <Route
                        key={path}
                        path={path}
                        element={<Component />}
                    />
                ))}

            {/* –ü—É–±–ª–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã - –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º */}
            {publicRoutes.map(({ path, Component }) => (
                <Route
                    key={path}
                    path={path}
                    element={<Component />}
                />
            ))}

            {/* –ö–û–†–ù–ï–í–û–ô –ü–£–¢–¨: –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –≤ /chat, –µ—Å–ª–∏ –Ω–µ—Ç - –≤ /login */}
            <Route
                path="/"
                element={
                    isAuth ?
                        <Navigate to="/chat" replace /> :
                        <Navigate to={LOGIN_ROUTE} replace />
                }
            />

            {/* –î–ª—è –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –ø—É—Ç–µ–π: –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –≥–∞–ª–µ—Ä–µ—è, –µ—Å–ª–∏ –Ω–µ—Ç - –ª–æ–≥–∏–Ω */}
            <Route
                path="*"
                element={
                    isAuth ?
                        <Chat /> :
                        <Navigate to={LOGIN_ROUTE} replace />
                }
            />
        </Routes>
    );
});

export default AppRouter;